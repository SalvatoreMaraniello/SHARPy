
Installation:
-----------------------------------------------------

Author: Salvatore Maraniello
Created: 07th Aug 2014 (notes on installation on linux machine)
Updated: 24th Feb 2015 (notes on installation on Archer)

Reference:
ref.0: https://github.com/SalvatoreMaraniello/SHARPy
ref.1: http://openmdao.org
ref.2: http://www.h5py.org/
ref.3: http://docs.h5py.org/
ref.4: http://www.archer.ac.uk/documentation/
ref.5: https://docs.python.org/2/install/index.html#install-index 
 

Comments:
----------------------------------------------------
- The notes below refer to both the installation on a server (Archer case) and on a personal computes (Ubuntu case).



Requirements:
----------------------------------------------------
The list below shows packages required and version numbers tested.

- gfortran: required to compile dynamic library for beam solver. In Archer, load GNU compilers loading the module PrgEnv-gnu
- SHARPy with optimiser: clone from git repository in ref.0
    - LAPACK, BLAS libraries are required
- python 2.7: the code has been running on a Linux machine (ubuntu) using python 2.7.3. On Archer, python 2.7.6 was in use. 
    - scipy: ver. 0.13.3 on Linux PC & Archer
    - numpy: ver. 1.8.1 on Linux PC, ver. 1.8.0 Archer
    - matplotlib: ver 1.1.1rc on Linux PC, ver. 1.3.1 on Archer
    - h5py: ver. 2.0.1 on Linux PC & Archer
        - libhdf5-dev: 
- OpenMDAO: ver. 0.10.0 on Linux PC and Archer. 
    


Installation:
--------------------------------------------------- 


- Compiler: on Linux machine, gfortran is recommended. In Archer, the GNU compilers can be loaded typing:
    module swap PrgEnv-cray PrgEnv-gnu
this setting has been proven to work for the compilations required in the OpenMDAO (slsqp optimiser), xbeam solver and hdf5 installation 


- Python packages: 
    - numpy, scipy, matplotlib:
        - refer to the official documentations. Ubuntu shipped versions of these packages may be too old (particularly numpy and scipy). In general, the reccomanded way is to download the package and install it using the setup.py script (see installation of h5py below). 
        - In Archer these packages are already available and can be loaded with the 'module add' command.
            module add numpy
            module add scipy/0.13.3-libsci
            module add matplotlib
        - to ensure that the modules are available in each section:
        	- create a  ~/.profile file if it does not exist.
        	- add the commands inside
    - h5py:
        - Download from ref.3, extract and enter the hdf5 folder:
            $ tar xzf h5py-X.Y.Z.tar.gz
            $ cd h5py-X.Y.Z
        - you can install the package running:
            - Linux: python setup.py install
            - Archer: to install the package:
                - Load one of these two modules
                    module load cray-hdf5-parallel   # should work but not tested
                    module load cray-hdf5            # works - tested
                - configure hdf5 version as follows (custom version is HDF5 1.8.4 - though not present in Archer, it could work by the way. Not tested):
                    python setup.py configure --hdf5-version=1.8.3
                - check the following settings:
                    Path to HDF5: '/opt/cray/hdf5/1.8.13/GNU/49'
                    HDF5 Version: '1.8.3'
                    MPI Enabled: False
                    Rebuild Required: True
                and note that the path to the HDF5 libraries should be automatically detected if the cray-hdf5 module has been loaded. Otherwise, specify manually (good luck with finding it!)
                - Build and install:
                    - python setup.py build
                    - python setup.py install --home= working_area 
                    - note that running 'python setup.py install --home=~' will install the libraries in the HOME filesystem, which is not accessible from the work file system
                - note: if there are issue, other possible options to try can include forcing the compiler:
                    python setup.py build --compiler=xxx


- OpenMDAO: 
    - download go-openmdao-0.10.0.py from http://openmdao.org/downloads/recent/
    - go to the folder where you want to install the libraries and run the script from terminal.
    - optional:
	    - to install the pyOpt/ipopt plugin, activate Openmdao environment and type:
		    - plugin install --github pyopt_driver/ipoptdriver
		    - for further details, refer to:
			    - http://openmdao.org/docs/tutorials/optimization/optimizers.html
			    - http://openmdao.org/docs/getting-started/using_plugins.html


- SHARPY with optimiser:
    - clone from git repository in ref.0
        git clone url_of_repository
      and checkout on the branch you want
        git checkout -b xxx
      where xxx is the name of the branch you want to clone. 
    - compile Beamsolver:
        - move into: PATH_TO_SHARPY/SHARPy/BeamLib/src/optimiser
        - create the following two directories: bin, obj
        - in the Makefile, update the LIBS variable to point to the LAPACK and BLAS libraries on your system. 
            - For Ubuntu/Linux machine, the default setting:
                LIBS= -llapack -lblas
              should work just fine. 
            - in Archer, -llapack and -lblas are automatically loaded with the  
                - In Makefile, set the LIBS variable to be empty:
                LIBS= 
            - Code compiled on archer should use the provided wrapper script 'ftn'. It is, therefore, reccomanded (but not necessary) to change also the F90COMP= gfortran to:
                F90COMP= ftn
        - type 'make wrapso'
   

- Setup Optimiser:
    - create your copy of shared.py (do not rename, unless you intend to rename all the import in all the modules of the wrapper). 
    - make sure that when you update your repository, shared.py does not get changed. Add it to your .gitignore file
        /work/e391/e391/sm6110/git/SHARPy/BeamLib/src/optimiser/wrapper/shared.py
    - in shared.py set openmdao_abspath to point at the directory where the openmdao libraries where installed. 
    - because during the installation openmdao makes a local copy of the packages installed on your machine, it is likely that all the paths to the egg files may need to be changed manually.
    - Create an environmental variable with the sharpy path: to do this add the following lines to your .profile file
        # SHARPy installation directory
        export SHARPYDIR="/home/sm6110/git/SHARPy"
      alternatively, hardcode the path to the main SHARPy folder into:
        SHARPy/src/Main/SharPySettings.py
        






